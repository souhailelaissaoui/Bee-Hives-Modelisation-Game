#include "Env.hpp"
#include <iostream>
#include <cassert>
#include <Application.hpp>
#include <vector>
#include <Utility/Utility.hpp>
#include "Random/Random.hpp"

void Env::update(sf::Time dt)
{std::vector<Flower*> temp(Flowers_);
    for (size_t i(0); i < temp.size(); i++) {
        (temp[i])->update(dt);
        if (temp[i]->getPollen() <= 0) {
            delete temp[i];
            Flowers_[i] = nullptr;
        }
    }
    Flowers_.erase(std::remove(Flowers_.begin(), Flowers_.end(), nullptr), Flowers_.end());
    
    
    generator_.update(dt);
}

void Env::drawOn(sf::RenderTarget& target)
{          world_.drawOn(target);
    for (size_t i(0); i < Flowers_.size(); i++) {
        Flowers_[i]->drawOn(target);
    }
    
    if (isDebugOn()) {
        auto const text = buildText(to_nice_string(world_.gethumidity(getApp().getCursorPositionInView())), getApp().getCursorPositionInView(), getAppFont(), 30, sf::Color::Red);
    target.draw(text); }
}

void Env::reset()
{
    Flowers_.clear();
    world_.reset(true);
    generator_.reset();
}

Env::~Env() {
    for (size_t i(0); i < Flowers_.size(); i++) {
    delete Flowers_[i];}
}
Env::Env() 
{
    try {
        loadWorldFromFile();
    }
    catch (std::runtime_error error) {
        reset();
    }
}
void Env::loadWorldFromFile()
{
    world_.loadFromFile();
}
void Env::saveWorldToFile()
{
    world_.saveToFile();
}

bool Env::addFlowerAt(Vec2d p)
{
    if (world_.isGrowable(p) and (getAppConfig()["simulation"]["env"]["max flowers"].toInt() > Flowers_.size() + 1)) {
        Flower* flower (new Flower (getAppConfig()["simulation"]["env"]["initial"]["flower"]["size"]["manual"].toDouble(), p, uniform(getAppConfig()["simulation"]["env"]["initial"]["flower"]["nectar"]["min"].toInt(), getAppConfig()["simulation"]["env"]["initial"]["flower"]["nectar"]["max"].toInt())));
        Flowers_.push_back(flower);
        
        return true;
    }
    return false;
}
void Env::drawFlowerZone(sf::RenderTarget& target, Vec2d const& position)
{
    if (world_.isGrowable(position)) {
        auto shape = buildAnnulus(position, getAppConfig()["simulation"]["env"]["initial"]["flower"]["size"]["manual"].toDouble(), sf::Color::Green, 5.0);
        target.draw(shape);
    }
    else {
        auto shape = buildAnnulus(position, getAppConfig()["simulation"]["env"]["initial"]["flower"]["size"]["manual"].toDouble(), sf::Color::Red, 5.0);
        target.draw(shape);
    }
}

double Env::gethumidity(Vec2d p) { return world_.gethumidity(p); }
